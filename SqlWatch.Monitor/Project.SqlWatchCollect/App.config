<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
    </startup>
  <system.diagnostics>
    <switches>
      <!-- TraceLevel Enum 
            0 - Off - Output no tracing and debugging messages.
            1 - Error - Output error-handling messages.
            2 - Warning - Output warnings and error-handling messages.
            3 - Info - Output informational messages, warnings, and error-handling messages.
            4 - Verbose	- Output all debugging and tracing messages. -->
      <add name="GeneralTraceSwitch" value="Verbose" />
    </switches>
  </system.diagnostics>
  <appSettings>
    <!-- Central repository connection details -->
    <add key="CentralRepositorySqlInstance" value="SQLWATCH-REPO" />
    <add key="CentralRepositorySqlDatabase" value="SQLWATCH" />
    <add key="CentralRepositorySqlUser" value="" />
    <add key="CentralRepositorySqlSecret" value="" />

    <!-- Data import -->
    <add key="SqlBulkCopy.BulkCopyTimeout" value="5" />
    <add key="SqlBulkCopy.EnableStreaming" value="true" />
    <add key="SqlBulkCopy.BatchSize" value="4000" />

    <!-- Log -->
    <add key="LogFile" value="C:\Temp\SqlWatchCollect.log" />
    <add key="MaxLogSizeMB" value="10" />
    <add key="MaxLogFiles" value="10" />
    <add key="PrintToLogFile" value="true" />
    <add key="PrintToConsole" value="true" />
	  
	<!-- Queue -->
	<add key="TargetType" value="SqlServer" />
	<add key="MaxQueueSize" value="2000" />
	  
	<!-- Threading -->
	<add key="MinThreads" value="-1" />
	<add key="MaxThreads" value="0" />
	<add key="MinPoolSize" value="0" />
	<add key="MaxPoolSize" value="0" />

  </appSettings>
	<system.web>
		<!--  It is adivsable to use Windows Authentication. 
          However, if you really want to use SQL authentication there are some
          important things to remember.
          
          The credentials will be stored in the SQLWATCH database, in 
          the [dbo].[sqlwatch_config_sql_instance] table.
          
          The password will be encryted using the Windows Machine Key, 
          or a key specified below.
          
          If you encrypt using the Machine key the application will only
          work on the machine where the encrypion happened.
          
          If you encrypt using the custom Key, the application will work
          on any machine but the Key will have to be saved in this config file.
          
          I would suggest to use the Machine key if you really have to. 
          Note that anyone with access to the Machine can technially get the Machine key
          and if they also have access to the SQLWATCH databae, they may be able to decrypt
          SQL passwords stored in the table. If you are going down this route, create a 
          SQL user that has READONLY access to the remote SQLWATCH databae and nothing else,
          so if someone decrypts the passwords, they are not going to gain access to anything
          on the remote Sql Instance.
          
          If you want to use custom Machine key, you MUST generate a new key,
          uncommited the machineKey section below and paste it there.
          You can generate ASP keys here https://www.allkeysgenerator.com/Random/ASP-Net-MachineKey-Generator.aspx 
          
          If you change the key after you have encrypted passwords, 
          or if you use Machine key and want to run it on a different machine,  
          you are going to have to recreate the user secret i.e. save a new, encrypted password. 
          You do not have to change the Sql Password, just re-save it using the new encryption keys.
          
          You can do so by running: 
          SqlWatchImport.exe -\-update -s SQLSERVER1 -u SQLUSER -p PASSWORD
          -->
		<machineKey
		 validationKey="BF889BA03603B00A7F0EB21819A9206966C5CB591D4C0EC06833405F33A4A10645DF760AB3F9F12618B00E79658436723F8C255E5A7B06860D421B05BC6D7DA8"
		 decryptionKey="C9D3C356175B615AA69B821EC469A3E08423B47D1BBE21ED5A69688677066161"
		 validation="SHA1"
		 decryption="AES"/>

		<membership defaultProvider="ClientAuthenticationMembershipProvider">
			<providers>
				<add name="ClientAuthenticationMembershipProvider" type="System.Web.ClientServices.Providers.ClientFormsAuthenticationMembershipProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" />
			</providers>
		</membership>
		<roleManager defaultProvider="ClientRoleProvider" enabled="true">
			<providers>
				<add name="ClientRoleProvider" type="System.Web.ClientServices.Providers.ClientRoleProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" cacheTimeout="86400" />
			</providers>
		</roleManager>
	</system.web>
	<runtime>  
       <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">  
            <dependentAssembly>  
                 <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />  
                 <bindingRedirect oldVersion="0.0.0.0-11.0.0.0" newVersion="11.0.0.0" />  
            </dependentAssembly>  
       </assemblyBinding>  
  </runtime>
</configuration>